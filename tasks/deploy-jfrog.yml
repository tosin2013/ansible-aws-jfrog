- name: Wait for SSH to come up
  wait_for_connection:
    delay: 3
    timeout: 360

- name: Install EPEL
  dnf:
    name: "{{ epel_link }}"
    disable_gpg_check: yes

- name: Update system packages
  dnf:
    name: "*"
    state: latest
    update_cache: yes
  register: update_task_result

- name: Install JFrog server packages
  yum:
    name: "{{ jfrog_server_pkgs }}"
    state: present
  delay: 10
  register: result
  retries: 3
  until: result is succeeded
      
- name: Reboot immediately if there were new packages installed
  shell: "sleep 5 && reboot"
  async: 1
  poll: 0
  when: update_task_result is changed

- name: Wait for the reboot to complete if there were new packages installed
  wait_for_connection:
    connect_timeout: 20
    sleep: 5
    delay: 5
    timeout: 300
  when: update_task_result is changed
  delay: 10
  register: wait_result
  retries: 3
  until: wait_result is succeeded

- name: Collect facts
  ansible.builtin.setup:

- name: Set hostname directly via /etc/hostname
  copy:
    dest: /etc/hostname
    content: "{{ jfrog_hostname }}.{{ base_domain }}"
    owner: root
    group: root
    mode: 0644

- name: Apply hostname change
  shell: |
    hostnamectl set-hostname "{{ jfrog_hostname }}.{{ base_domain }}" || true
    systemctl restart systemd-hostnamed || true
  register: hostname_result
  retries: 3
  delay: 10
  until: hostname_result.rc == 0

- name: Create JFrog group
  ansible.builtin.group:
    name: jfrog
    state: present
    gid: 1234

- name: Create JFrog user
  ansible.builtin.user:
    name: jfrog
    state: present
    groups: jfrog
    uid: 1234
    shell: /bin/bash
    home: /home/jfrog
    create_home: yes

- name: Create HAProxy group
  ansible.builtin.group:
    name: haproxy
    state: present
    gid: 1235

- name: Create HAProxy user
  ansible.builtin.user:
    name: haproxy
    state: present
    groups: haproxy
    uid: 1235
    shell: /bin/bash
    home: /opt/haproxy
    create_home: yes

- name: Create persistent data directory if needed for JFrog
  file:
    path: "{{ loop_dir }}"
    state: directory
    mode: 0775
    owner: "1234"
    group: "1234"
  loop:
    - /opt/jfrog/artifactory/var
    - /var/opt/jfrog/artifactory
    - /opt/jfrog/artifactory/etc
    - /opt/jfrog/artifactory/etc/security
  loop_control:
    loop_var: loop_dir

- name: Create persistent data directory if needed for HAProxy
  file:
    path: "{{ loop_dir }}"
    state: directory
    mode: 0775
    owner: "1235"
    group: "1235"
  loop:
    - /opt/haproxy
    - /opt/certs
  loop_control:
    loop_var: loop_dir

- name: Create persistent data directory if needed for Certbot
  file:
    path: "{{ loop_dir }}"
    state: directory
    mode: 0775
    owner: "1235"
    group: "1235"
  loop:
    - /opt/letsencrypt
    - /opt/webroot
  loop_control:
    loop_var: loop_dir

- name: Disable SELinux because I am a lazy bastard
  selinux:
    state: disabled

- name: Set Sysctl for ports and stuff
  ansible.posix.sysctl:
    name: net.ipv4.ip_unprivileged_port_start
    value: '80'
    state: present

- name: Set /etc/hosts file
  copy:
    dest: "/etc/hosts"
    content: |
      127.0.0.1 localhost localdomain
      {{ hostvars[inventory_hostname].ansible_eth0.ipv4.address }} {{ jfrog_hostname }}.{{ base_domain }} {{ base_domain }}

- name: Ensure firewalld is running
  block:
    - name: Enable firewalld
      shell: systemctl enable firewalld
      register: enable_result
      changed_when: enable_result.rc == 0
      ignore_errors: true

    - name: Check for conflicting services
      shell: |
        systemctl list-units --state=running --no-legend --plain | grep -E 'import-state|dbus' | awk '{print $1}' | xargs -I {} systemctl is-active --quiet {} && echo {}
      register: conflicting_services
      changed_when: false
      ignore_errors: true

    - name: Validate conflicting services
      set_fact:
        valid_conflicting_services: >-
          {{
            conflicting_services.stdout_lines | 
            select('match', '^[a-zA-Z0-9-]+\.(service|socket)$') |
            list
          }}
      when: conflicting_services.stdout != ""

    - name: Stop conflicting services if found
      shell: |
        systemctl stop {{ item }}
      with_items: "{{ valid_conflicting_services }}"
      when: valid_conflicting_services | length > 0
      retries: 3
      delay: 5
      until: result is succeeded
      ignore_errors: true

    - name: sleep for 120 seconds
      pause:
        seconds: 120

    - name: Restart firewalld with delay
      shell: |
        systemctl restart firewalld || true
        sleep 60
      register: restart_result
      retries: 10
      delay: 30
      until: restart_result.rc == 0
      ignore_errors: true
      changed_when: false
      failed_when: false

- name: Configure firewall rules if operational
  block:
    - name: Configure firewall services
      ansible.posix.firewalld:
        permanent: yes
        immediate: yes
        state: enabled
        service: "{{ item }}"
      with_items:
        - ssh
        - http
        - https
        - cockpit

    - name: Configure firewall ports for JFrog
      ansible.posix.firewalld:
        permanent: yes
        immediate: yes
        state: enabled
        port: "{{ item }}/tcp"
      with_items:
        - 8081
        - 8082

- name: Reload firewall to apply changes
  ansible.posix.firewalld:
    state: enabled

- name: Pull JFrog Image
  containers.podman.podman_image:
    name: "{{ jfrog_container_image }}"

- name: Pull HAProxy Image
  containers.podman.podman_image:
    name: "{{ haproxy_container_image }}"

- name: Pull PostgreSQL Image
  containers.podman.podman_image:
    name: "postgres:latest"

- name: Create PostgreSQL data directory
  file:
    path: /var/lib/pgsql/data
    state: directory
    owner: 1234
    group: 1234
    mode: 0755

- name: Start PostgreSQL container
  containers.podman.podman_container:
    name: postgres
    image: postgres:latest
    state: started
    env:
      POSTGRES_USER: artifactory
      POSTGRES_PASSWORD: password
      POSTGRES_DB: artifactorydb
    ports:
      - "5432:5432"
    volumes:
      - /var/lib/pgsql/data:/var/lib/postgresql/data
    restart_policy: always

- name: Create JFrog etc directory
  file:
    path: /opt/jfrog/artifactory/etc
    state: directory
    owner: 1234
    group: 1234
    mode: 0755

- name: Create directory for master key
  file:
    path: /opt/jfrog/artifactory/var/etc/security/
    state: directory
    owner: 1234
    group: 1234
    mode: 0755

- name: Generate master key
  shell: |
    openssl rand -hex 32 > /opt/jfrog/artifactory/var/etc/security/master.key
    chmod 600 /opt/jfrog/artifactory/var/etc/security/master.key
    chown 1234:1234 /opt/jfrog/artifactory/var/etc/security/master.key
  args:
    creates: /opt/jfrog/artifactory/var/etc/security/master.key

- name: Read master key
  shell: cat /opt/jfrog/artifactory/var/etc/security/master.key
  register: master_key
  changed_when: false

- name: Generate join key
  shell: |
    openssl rand -hex 32 > /opt/jfrog/artifactory/var/etc/security/join.key
    chmod 600 /opt/jfrog/artifactory/var/etc/security/join.key
    chown 1234:1234 /opt/jfrog/artifactory/var/etc/security/join.key
  args:
    creates: /opt/jfrog/artifactory/var/etc/security/join.key
    

- name: Create system.yaml configuration
  copy:
    dest: /opt/jfrog/artifactory/etc/system.yaml
    content: |
      shared:
        database:
          driver: org.postgresql.Driver
          type: postgresql
          url: jdbc:postgresql://localhost:5432/artifactorydb
          username: artifactory
          password: password
        security:
          masterKey: "{{ master_key.stdout }}"
    owner: 1234
    group: 1234
    mode: 0644

- name: Template JFrog Service file
  template:
    src: templates/jfrog-container.service.j2
    dest: /etc/systemd/system/jfrog-container.service
    owner: root
    group: root
    mode: 0755

- name: Template HAProxy Service file
  template:
    src: templates/haproxy-container.service.j2
    dest: /etc/systemd/system/haproxy-container.service
    owner: root
    group: root
    mode: 0755

- name: Template HAProxy configuration file
  template:
    src: templates/haproxy.cfg.j2
    dest: /opt/haproxy/haproxy.cfg
    owner: 1235
    group: 1235
    mode: 0775

- name: Template HAProxy CRT file
  template:
    src: templates/crt-list.cfg.j2
    dest: /opt/haproxy/crt-list.cfg
    owner: 1235
    group: 1235
    mode: 0775

- name: Create nginx directory
  ansible.builtin.file:
    path: /opt/nginx
    state: directory
    mode: 0775

- name: Template Nginx configuration file
  template:
    src: templates/nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: 991
    group: 987
    mode: 0775

- name: Seed default certificate
  shell:
    cmd: |
      openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -keyout /opt/certs/default.key -out /opt/certs/default.crt -subj "/C=US/ST=North Carolina/L=Raleigh/O=InfoSec/CN={{ jfrog_server_fqdn }}"
      cat /opt/certs/default.key /opt/certs/default.crt > /opt/certs/default.pem
      rm /opt/certs/default.key /opt/certs/default.crt
    creates: /opt/certs/default.pem

- name: Request cerbot certificate
  when: enable_certbot|bool
  shell:
    cmd: |
      certbot certonly --standalone -n -d {{ jfrog_server_fqdn }} --email {{ certbot_email }} --agree-tos
      cat /etc/letsencrypt/live/{{ jfrog_server_fqdn }}/privkey.pem /etc/letsencrypt/live/{{ jfrog_server_fqdn }}/fullchain.pem > /opt/certs/{{ jfrog_server_fqdn }}.pem
      chown 1235:1235 /opt/certs/{{ jfrog_server_fqdn }}.pem
    creates: "/etc/letsencrypt/live/{{ jfrog_server_fqdn }}/privkey.pem"

- name: Reload systemd units
  service:
    daemon_reload: yes

- name: Start Cockpit Service
  service:
    name: cockpit
    state: started
    enabled: yes

- name: Start JFrog Service
  service:
    name: jfrog-container
    state: started
    enabled: yes

- name: Start HAProxy Service
  service:
    name: haproxy-container
    state: started
    enabled: yes

- name: Test JFrog URL
  uri:
    url: "https://{{ jfrog_server_fqdn }}"
    return_content: yes
    validate_certs: no
  register: jfrog_url_status
  failed_when: jfrog_url_status.status != 200

- name: Show JFrog URL status
  debug:
    msg: "JFrog URL Status Code: {{ jfrog_url_status.status }}"

- name: JFrog provisioning complete!
  debug:
    msg: |
      =======================================================
      JFrog provisioning complete!
      =======================================================
      JFrog Endpoint:     https://{{ jfrog_server_fqdn }}
      Default Username:   admin
      Default Password:   password
  when: jfrog_url_status.status == 200

- name: JFrog URL failed, please troubleshoot
  debug:
    msg: |
      =======================================================
      JFrog provisioning complete, but the URL check failed!
      =======================================================
      JFrog Endpoint:     https://{{ jfrog_server_fqdn }}
      Please troubleshoot the JFrog service.
  when: jfrog_url_status.status != 200
